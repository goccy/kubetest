//go:build !ignore_autogenerated
// +build !ignore_autogenerated

package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"sync"

	"k8s.io/client-go/kubernetes"
)

type ResourceManager struct {
	repoMgr     *RepositoryManager
	tokenMgr    *TokenManager
	artifactMgr *ArtifactManager
	setupOnce   sync.Once
	doneSetup   bool
	logPath     string
	reportPath  string
}

func NewResourceManager(clientset *kubernetes.Clientset, testjob TestJob) *ResourceManager {
	tokenClient := NewTokenClient(clientset, testjob.Namespace)
	tokenMgr := NewTokenManager(testjob.Spec.Tokens, tokenClient)
	repoMgr := NewRepositoryManager(testjob.Spec.Repos, tokenMgr)
	artifactMgr := NewArtifactManager(testjob.Spec.ExportArtifacts)
	return &ResourceManager{
		repoMgr:     repoMgr,
		tokenMgr:    tokenMgr,
		artifactMgr: artifactMgr,
	}
}

func (m *ResourceManager) Cleanup() error {
	return m.repoMgr.Cleanup()
}

func (m *ResourceManager) Setup(ctx context.Context) error {
	defer func() {
		m.doneSetup = true
	}()
	var err error
	m.setupOnce.Do(func() {
		err = m.repoMgr.CloneAll(ctx)
	})
	return err
}

func (m *ResourceManager) WriteLog(logger Logger) error {
	mainLogger, ok := logger.(*mainLogger)
	if !ok {
		return fmt.Errorf("kubetest: failed to write log. logger must be mainLogger instance: %T", logger)
	}
	logPath, err := m.LogPath()
	if err != nil {
		return err
	}
	if err := os.WriteFile(logPath, mainLogger.buf.Bytes(), 0644); err != nil {
		return fmt.Errorf("kubetest: failed to create log file: %w", err)
	}
	return nil
}

func (m *ResourceManager) LogPath() (string, error) {
	if m.logPath != "" {
		return m.logPath, nil
	}
	dir, err := os.MkdirTemp("", "log")
	if err != nil {
		return "", fmt.Errorf("kubetest: failed to create temporary directory for log: %w", err)
	}
	m.logPath = filepath.Join(dir, "kubetest.log")
	return m.logPath, nil
}

const (
	reportJSONFile = "report.json"
)

func (m *ResourceManager) WriteReport(result *Result) error {
	reportPath, err := m.ReportPath(ReportFormatTypeJSON)
	if err != nil {
		return err
	}
	b, err := json.Marshal(result)
	if err != nil {
		return fmt.Errorf("kubetest: failed to encode result to json: %w", err)
	}
	if err := os.WriteFile(reportPath, b, 0644); err != nil {
		return fmt.Errorf("kubetest: failed to create report.json: %w", err)
	}
	return nil
}

func (m *ResourceManager) ReportPath(format ReportFormatType) (string, error) {
	if m.reportPath == "" {
		dir, err := os.MkdirTemp("", "report")
		if err != nil {
			return "", fmt.Errorf("kubetest: failed to create temporary directory for report: %w", err)
		}
		m.reportPath = dir
	}
	switch format {
	case ReportFormatTypeJSON:
		return filepath.Join(m.reportPath, reportJSONFile), nil
	default:
		return filepath.Join(m.reportPath, "report"), nil
	}
}

func (m *ResourceManager) RepositoryPathByName(name string) (string, error) {
	if !m.doneSetup {
		return "", fmt.Errorf("kubetest: resource manager isn't setup")
	}
	return m.repoMgr.ArchivePathByRepoName(name)
}

func (m *ResourceManager) TokenPathByName(ctx context.Context, name string) (string, error) {
	if !m.doneSetup {
		return "", fmt.Errorf("kubetest: resource manager isn't setup")
	}
	token, err := m.tokenMgr.TokenByName(ctx, name)
	if err != nil {
		return "", err
	}
	return token.File, nil
}

func (m *ResourceManager) ArtifactPathByName(ctx context.Context, name string) (string, error) {
	if !m.doneSetup {
		return "", fmt.Errorf("kubetest: resource manager isn't setup")
	}
	return m.artifactMgr.LocalPathByName(ctx, name)
}

func (m *ResourceManager) ArtifactPathByNameAndContainerName(name, containerName string) (string, error) {
	if !m.doneSetup {
		return "", fmt.Errorf("kubetest: resource manager isn't setup")
	}
	return m.artifactMgr.LocalPathByNameAndContainerName(name, containerName)
}

func (m *ResourceManager) ExportArtifacts(ctx context.Context) error {
	return m.artifactMgr.ExportArtifacts(ctx)
}
